(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{178:function(a,e,s){"use strict";s.r(e);var t=s(0),n=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"webpack面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack面试题","aria-hidden":"true"}},[a._v("#")]),a._v(" webpack面试题")]),a._v(" "),s("h2",{attrs:{id:"loader和plugin的区别是什么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loader和plugin的区别是什么？","aria-hidden":"true"}},[a._v("#")]),a._v(" Loader和Plugin的区别是什么？")]),a._v(" "),s("ul",[s("li",[a._v('Loader直译为"加载器"，webpack原生是只能解析js文件，如果想将其他文件也打包的话，就会用到loader。比如处理sass和less等')]),a._v(" "),s("li",[a._v("Loader在module.rules中配置，也就是说作为模块的解析规则而存在。 类型为数组，每一项都是一个Object，里面描述了对于什么类型的文件（test），使用什么加载(loader)和使用的参数（options）")]),a._v(" "),s("li",[a._v('Plugin直译为"插件"。Plugin可以扩展webpack的功能，在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。')]),a._v(" "),s("li",[a._v("Plugin在plugins中单独配置。 类型为数组，每一项是一个plugin的实例，参数都通过构造函数传入。")])]),a._v(" "),s("h2",{attrs:{id:"常用的loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用的loader","aria-hidden":"true"}},[a._v("#")]),a._v(" 常用的loader")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// raw-loader：加载文件原始内容（utf-8）")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// file-loader：把文件输出到一个文件夹中，在代码中通过相对URL去引用输出的文件")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// url-loader:和file-loader类似，但是能在文件很小的情况下以base64的方式把文件内容注入到代码中")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// source-map-loader:加载额外的Source Map文件，以方便断点调试")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// svg-inline-loader：将压缩后的 SVG 内容注入代码中")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// image-loader：加载并且压缩图片文件")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// json-loader 加载 JSON 文件（默认包含）")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// handlebars-loader: 将 Handlebars 模版编译成函数并返回")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// babel-loader：把ES6转化成ES5")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ts-loader: 将 TypeScript 转换成 JavaScript")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// awesome-typescript-loader：将 TypeScript 转换成 JavaScript，性能优于 ts-loader")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// css-loader：加载css，支持模块化、压缩、文件导入等特性")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// style-loader：把css代码注入到js中，通过DOM操作去加载css")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// eslint-loader：通过ESLint检查JS代码")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// tslint-loader：通过 TSLint检查 TypeScript 代码")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// postcss-loader：扩展 CSS 语法，使用下一代 CSS，可以配合 autoprefixer 插件自动补齐 CSS3 前缀")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// vue-loader：加载 Vue.js 单文件组件")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// cache-loader: 可以在一些性能开销较大的 Loader 之前添加，目的是将结果缓存到磁盘里")]),a._v("\n")])])]),s("h2",{attrs:{id:"常见的plugin以及作用的总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的plugin以及作用的总结","aria-hidden":"true"}},[a._v("#")]),a._v(" 常见的plugin以及作用的总结")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// define-plugin：定义环境变量(Webpack4 之后指定 mode 会自动配置)")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ignore-plugin：忽略部分文件")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// commons-chunk-plugin：提取公共代码")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// html-webpack-plugin：简化 HTML 文件创建 (依赖于 html-loader)")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// web-webpack-plugin：可方便地为单页应用输出 HTML，比 html-webpack-plugin 好用")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// uglifyjs-webpack-plugin：不支持 ES6 压缩 (Webpack4 以前)")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// terser-webpack-plugin: 支持压缩 ES6 (Webpack4)")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// mini-css-extract-plugin: 分离样式文件，CSS 提取为独立文件，支持按需加载 (替代extract-text-webpack-plugin)")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// webpack-parallel-uglify-plugin: 多进程执行代码压缩，提升构建速度")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// serviceworker-webpack-plugin：为网页应用增加离线缓存功能")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// clean-webpack-plugin: 目录清理")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ModuleConcatenationPlugin: 开启 Scope Hoisting")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// speed-measure-webpack-plugin: 可以看到每个 Loader 和 Plugin 执行耗时 (整个打包耗时、每个 Plugin 和 Loader 耗时)")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// webpack-bundle-analyzer: 可视化 Webpack 输出文件的体积 (业务组件、依赖第三方模块)")]),a._v("\n")])])]),s("h2",{attrs:{id:"webpack中source-map是什么？生产环境怎么用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack中source-map是什么？生产环境怎么用","aria-hidden":"true"}},[a._v("#")]),a._v(" webpack中source map是什么？生产环境怎么用")]),a._v(" "),s("ul",[s("li",[a._v("source map是将编译、打包、压缩后的代码映射回源代码的过程。打包压缩后的代码不具备良好的可读性，想要调试源码就需要 soucre map。")]),a._v(" "),s("li",[a._v("map文件只要不打开开发者工具，浏览器是不会加载的")]),a._v(" "),s("li",[a._v("线上环境一般有三种处理方案：\n"),s("ul",[s("li",[a._v("hidden-source-map：借助第三方错误监控平台Sentry使用")]),a._v(" "),s("li",[a._v("nosources-source-map：只会显示具体行数以及查看源代码的错误栈。安全性比source map高")]),a._v(" "),s("li",[a._v("source：通过nginx设置将.map文件只对白名单开放(公司内网)")])])])]),a._v(" "),s("h2",{attrs:{id:"如何实现-webpack-持久化缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何实现-webpack-持久化缓存","aria-hidden":"true"}},[a._v("#")]),a._v(" 如何实现 webpack 持久化缓存?")]),a._v(" "),s("ul",[s("li",[a._v("服务端设置HTTP缓存头(Cache-Control等)")]),a._v(" "),s("li",[a._v("打包依赖(dependencies)和运行时(runtime)到不同chunk(在webpack中，编译后的单独文件称为chunk)，即作splitChunk，因为它们几乎是不变的")]),a._v(" "),s("li",[a._v("延迟加载：使用import()方式，可以动态加载的文件分到独立的chunk，以得到自己的chunkhash")]),a._v(" "),s("li",[a._v("保证hash值稳定")])]),a._v(" "),s("h2",{attrs:{id:"import和commonjs在webpack打包过程中有什么不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#import和commonjs在webpack打包过程中有什么不同","aria-hidden":"true"}},[a._v("#")]),a._v(" Import和CommonJs在webpack打包过程中有什么不同?")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("1.es6模块调用commonjs模块")])]),a._v(" "),s("li",[s("p",[a._v("可以直接使用commonjs模块，commonjs模块将不会被webpack的模块系统编译而是原样输出，并且commonjs模块没有default属性")])]),a._v(" "),s("li",[s("p",[a._v("2.es6模块调用es6模块")])]),a._v(" "),s("li",[s("p",[a._v("被调用的es6模块不会添加{esModule:true}，只有调用者才会添加{esModule:true}，并且可以进行tree-shaking操作，如果被调用的es6模块只是import进来，但是并没有被用到，那么被调用的es6模块将会被标记为/* unused harmony default export */，在压缩时此模块将被删除(如果被调用的es6模块里有立即执行语句，那么这些语句将会被保留)")])]),a._v(" "),s("li",[s("p",[a._v("3.commonjs模块引用es6模块")])]),a._v(" "),s("li",[s("p",[a._v("es6模块编译后会添加{__esModule:true}。如果被调用的es6模块中恰好有export default语句，那么编译后的es6模块将会添加default属性")])]),a._v(" "),s("li",[s("p",[a._v("4.commonjs模块调用commonjs模块")])]),a._v(" "),s("li",[s("p",[a._v("commonjs模块会原样输出")])])]),a._v(" "),s("h2",{attrs:{id:"webpack打包时hash码是怎样生成的？随机值存在一样的情况，如何避免？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack打包时hash码是怎样生成的？随机值存在一样的情况，如何避免？","aria-hidden":"true"}},[a._v("#")]),a._v(" webpack打包时Hash码是怎样生成的？随机值存在一样的情况，如何避免？")]),a._v(" "),s("ul",[s("li",[a._v("hash、chunkhash、contenthash")]),a._v(" "),s("li",[a._v("hash代表每次webpack编译中生成的hash值，所有使用这种方式的文件hash都相同。每次构建都会使webpack计算新的hash。 chunkhash基于入口文件及其关联的chunk生成，某个文件的改动只会影响与它有关联的chunk的hash值，不会影响其他文件 contenthash根据文件内容创建。当文件内容发生变化时，contenthash发生变化")]),a._v(" "),s("li",[a._v("webpack在计算hash后分割chunk。产生相同随机值可能是因为这些文件属于同一个chunk，可以将某一个文件提到独立的chunk(如放入entry)")])]),a._v(" "),s("h2",{attrs:{id:"tree-shaking"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking","aria-hidden":"true"}},[a._v("#")]),a._v(" tree-shaking")]),a._v(" "),s("ul",[s("li",[a._v("tree-shaking 是一种通过清除多余代码方式来优化项目打包体积的技术")]),a._v(" "),s("li",[a._v("es6是静态的导入语法,ES6的import语法可以使用tree-shaking，因为可以在代码不运行的情况下就能分析出不需要的代码。")]),a._v(" "),s("li",[a._v("commonjs是动态导入的语法")]),a._v(" "),s("li",[a._v("原理\n"),s("ul",[s("li",[a._v("利用ES6模块的特点(静态语法)")]),a._v(" "),s("li",[a._v("只能作为模块顶层的语句出现")]),a._v(" "),s("li",[a._v("import的模块名只能是字符串常量，不能动态引入模块")]),a._v(" "),s("li",[a._v("这是因为tree-shaking只能在静态模块下工作")])])])]),a._v(" "),s("h3",{attrs:{id:"副作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#副作用","aria-hidden":"true"}},[a._v("#")]),a._v(" 副作用")]),a._v(" "),s("ul",[s("li",[a._v("比如ployfill,ployfills不对外暴露方法给主程序使用,tree-shaking不能自动识别哪些代码属于副作用")]),a._v(" "),s("li",[a._v("通过package.json进行设置")])]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"tree-shaking"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"sideEffects"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"./src/public/polyfill.js"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("h2",{attrs:{id:"webpack优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack优化","aria-hidden":"true"}},[a._v("#")]),a._v(" webpack优化")]),a._v(" "),s("h3",{attrs:{id:"减少打包时间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#减少打包时间","aria-hidden":"true"}},[a._v("#")]),a._v(" 减少打包时间")]),a._v(" "),s("ul",[s("li",[a._v("1、优化Loader,loader 会对源码进行ast解析,转换的代码越多，效率就越低。\n"),s("ul",[s("li",[a._v("a、通过配置查找的范围或者过滤某些文件")]),a._v(" "),s("li",[a._v("b、将babel编译文件进行缓存 "),s("code",[a._v("loader: 'babel-loader?cacheDirectory=true'")])])])]),a._v(" "),s("li",[a._v("2、HappyPack 多线程打包")]),a._v(" "),s("li",[a._v("3、DllPlugin 动态链接库,把公共代码抽离成单独文件(vue,element,loadsh等),或者用CDN")]),a._v(" "),s("li",[a._v("4、代码压缩相关")])]),a._v(" "),s("h3",{attrs:{id:"减少打包体积"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#减少打包体积","aria-hidden":"true"}},[a._v("#")]),a._v(" 减少打包体积")]),a._v(" "),s("ul",[s("li",[a._v("1、按需加载，首页加载文件越小越好，将每个页面单独打包为一个文件")]),a._v(" "),s("li",[a._v("2、Tree shaking")])])])}],!1,null,null,null);e.default=n.exports}}]);